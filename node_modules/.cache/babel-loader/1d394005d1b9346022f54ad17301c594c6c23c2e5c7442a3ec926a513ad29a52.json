{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alwin\\\\Desktop\\\\bookself-rearranger\\\\client\\\\src\\\\components\\\\OCRTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OCRTest = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [image, setImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [canvasRef, setCanvasRef] = useState(null);\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setImage(URL.createObjectURL(file));\n    }\n  };\n  const handleImageUpload = () => {\n    if (image) {\n      setLoading(true);\n      // Process the image to detect rotation\n      const img = new Image();\n      img.src = image;\n      img.onload = () => {\n        // Create a canvas element to process the image\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const width = img.width;\n        const height = img.height;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.drawImage(img, 0, 0);\n\n        // Rotate the canvas context if needed\n        // Example rotation logic: Rotate by 90 degrees if needed\n        ctx.rotate(90 * Math.PI / 180);\n        ctx.translate(0, -height);\n        ctx.drawImage(img, 0, 0);\n\n        // Convert canvas to data URL\n        const rotatedImage = canvas.toDataURL('image/jpeg');\n\n        // Perform OCR on the processed image\n        Tesseract.recognize(rotatedImage, 'eng',\n        // Specify language code\n        {\n          logger: info => console.log(info),\n          oem: 1,\n          psm: 6\n        }).then(({\n          data: {\n            text\n          }\n        }) => {\n          setText(text);\n          setLoading(false);\n        }).catch(err => {\n          console.error(err);\n          setLoading(false);\n        });\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"OCR Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleImageUpload,\n      children: \"Process Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"Selected\",\n        style: {\n          maxWidth: '100%',\n          marginTop: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(OCRTest, \"MNtR6qr3/RS+CaoszkMre2H3GvA=\");\n_c = OCRTest;\nexport default OCRTest;\nvar _c;\n$RefreshReg$(_c, \"OCRTest\");","map":{"version":3,"names":["React","useState","useRef","Tesseract","jsxDEV","_jsxDEV","OCRTest","_s","text","setText","image","setImage","loading","setLoading","canvasRef","setCanvasRef","handleImageChange","e","file","target","files","URL","createObjectURL","handleImageUpload","img","Image","src","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","rotate","Math","PI","translate","rotatedImage","toDataURL","recognize","logger","info","console","log","oem","psm","then","data","catch","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","alt","style","maxWidth","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/alwin/Desktop/bookself-rearranger/client/src/components/OCRTest.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\n\r\nconst OCRTest = () => {\r\n  const [text, setText] = useState('');\r\n  const [image, setImage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [canvasRef, setCanvasRef] = useState(null);\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setImage(URL.createObjectURL(file));\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = () => {\r\n    if (image) {\r\n      setLoading(true);\r\n      // Process the image to detect rotation\r\n      const img = new Image();\r\n      img.src = image;\r\n      img.onload = () => {\r\n        // Create a canvas element to process the image\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const width = img.width;\r\n        const height = img.height;\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // Rotate the canvas context if needed\r\n        // Example rotation logic: Rotate by 90 degrees if needed\r\n        ctx.rotate(90 * Math.PI / 180);\r\n        ctx.translate(0, -height);\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // Convert canvas to data URL\r\n        const rotatedImage = canvas.toDataURL('image/jpeg');\r\n\r\n        // Perform OCR on the processed image\r\n        Tesseract.recognize(\r\n          rotatedImage,\r\n          'eng', // Specify language code\r\n          {\r\n            logger: info => console.log(info),\r\n            oem: 1,\r\n            psm: 6\r\n          }\r\n        ).then(({ data: { text } }) => {\r\n          setText(text);\r\n          setLoading(false);\r\n        }).catch(err => {\r\n          console.error(err);\r\n          setLoading(false);\r\n        });\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>OCR Test</h2>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      <button onClick={handleImageUpload}>Process Image</button>\r\n      <div>\r\n        {loading && <p>Processing...</p>}\r\n        {image && <img src={image} alt=\"Selected\" style={{ maxWidth: '100%', marginTop: '20px' }} />}\r\n        <pre>{text}</pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OCRTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}